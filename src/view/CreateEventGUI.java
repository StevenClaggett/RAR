/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;
import DataModel.*;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
/**
 *
 * @author Steven
 */
public class CreateEventGUI extends javax.swing.JFrame {

    private static RARDocument doc;
    Member[] onScreen;
    MemberSet builder;
    /**
     * Creates new form CreateEventGUI
     */
    public CreateEventGUI(RARDocument doc_) 
    {
        this.doc = doc_;
        builder = new MemberSet();
        initComponents();
        initializeRosterTable();
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
    }

    private void initializeRosterTable()
    {
        ArrayList<Member> localList = doc.getRoster().getRosterSet();
        int columns = 3;
        int rows = localList.size();
        onScreen = new Member[rows];
        String[][] tableBuilder = new String[rows][columns];
        rosterTable.setColumnSelectionAllowed(false);
        for (int i = 0; i < rows; i++)
        {
            tableBuilder[i][0] = localList.get(i).getlName();
            tableBuilder[i][1] = localList.get(i).getfName();
            tableBuilder[i][2] = localList.get(i).getEmail();
            onScreen[i]  = localList.get(i);
        }
        
        rosterTable.setModel(new javax.swing.table.DefaultTableModel(tableBuilder, new String[]{
            "Last Name", "First Name", "Email"
        }));
        
        
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        nameTextArea = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        lastNameField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        rosterTable = new javax.swing.JTable();
        searchButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        invitesTable = new javax.swing.JTable();
        createButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        clearInvitesButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Please enter some information about your event . . .");

        jLabel2.setText("Name/Description:");

        nameTextArea.setColumns(20);
        nameTextArea.setRows(5);
        jScrollPane1.setViewportView(nameTextArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel3.setText("Now please select the members you would like to be invited . . .");

        jLabel4.setText("Search by first name");

        jLabel5.setText("Search by last name");

        rosterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Last Name", "First Name", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rosterTable.setCellSelectionEnabled(false);
        rosterTable.setRowSelectionAllowed(true);
        rosterTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(rosterTable);
        rosterTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add Current Selection to Invites");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Roster (Everyone in system)");

        jLabel7.setText("Current Invite List");

        invitesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Last Name", "First Name", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invitesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(invitesTable);

        createButton.setText("Create Event");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        clearInvitesButton.setText("Clear Invites");
        clearInvitesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearInvitesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(createButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addGap(8, 8, 8)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(firstNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                            .addComponent(lastNameField))
                                        .addGap(18, 18, 18)
                                        .addComponent(searchButton))))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(clearInvitesButton))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 24, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(clearInvitesButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String f = firstNameField.getText();
        String l = lastNameField.getText();
        
        MemberSet searchResults = new MemberSet();
        
        ArrayList<Member> localList = doc.getRoster().getRosterSet();
        
        for (Member m: localList)
        {
            if ((f.length() != 0 && m.getfName().toLowerCase().contains(f.toLowerCase().subSequence(0, f.length()))) || (l.length() != 0 && m.getlName().toLowerCase().contains(l.toLowerCase().subSequence(0, l.length()))))
            {
                searchResults.addMember(m);
            }
            
            if (l.length() == 0 && f.length() == 0)
            {
                searchResults.addMember(m);
            }
        }
        
        onScreen = new Member[searchResults.getRosterSet().size()];
        
        for (int i = 0; i < searchResults.getRosterSet().size(); i++)
        {
            onScreen[i] = searchResults.getRosterSet().get(i);
        }
        
        int columns = 3;
        int rows = searchResults.getRosterSet().size();
        String[][] tableBuilder = new String[rows][columns];
        
        for (int i = 0; i < rows; i++)
        {
            tableBuilder[i][0] = onScreen[i].getlName();
            tableBuilder[i][1] = onScreen[i].getfName();
            tableBuilder[i][2] = onScreen[i].getEmail();
        }
        
        rosterTable.setModel(new javax.swing.table.DefaultTableModel(tableBuilder, new String[]{
            "Last Name", "First Name", "Email"
        }));
    }//GEN-LAST:event_searchButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        int [] selects = rosterTable.getSelectedRows();
        
        for (int i: selects)
        {
            builder.addMember(onScreen[i]);
        }
        
        int columns = 3;
        int rows = builder.getRosterSet().size();
        String[][] tableBuilder = new String[rows][columns];
        
        for (int i = 0; i < rows; i++)
        {
            tableBuilder[i][0] = builder.getRosterSet().get(i).getlName();
            tableBuilder[i][1] = builder.getRosterSet().get(i).getfName();
            tableBuilder[i][2] = builder.getRosterSet().get(i).getEmail();
        }
        
        invitesTable.setModel(new javax.swing.table.DefaultTableModel(tableBuilder, new String[]{
            "Last Name", "First Name", "Email"
        }));
    }//GEN-LAST:event_addButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        String name = nameTextArea.getText();
        
        if (name.length() != 0)
        {
            if (builder.getRosterSet().size() > 0)
            {
                Event toAdd = new Event(builder, name);
                if (!doc.getFutureEvents().contains(toAdd) && !doc.getCompletedEvents().contains(toAdd))
                {
                    if (doc.getFutureEvents().add(toAdd))
                    {
                        JOptionPane.showMessageDialog(this, "Event with " + builder.getRosterSet().size() + " invites added successfuly.");
                        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
                    }
                    
                } else
                {
                    JOptionPane.showMessageDialog(this, "An event with that name/description already exists.");
                }
            } else
            {
                JOptionPane.showMessageDialog(this, "Please select at least one invite.");
            }
        } else
        {
            JOptionPane.showMessageDialog(this, "Please enter a name or description for the event.");
        }
    }//GEN-LAST:event_createButtonActionPerformed

    private void clearInvitesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearInvitesButtonActionPerformed
        builder = new MemberSet();
        invitesTable.setModel(new javax.swing.table.DefaultTableModel(new String[0][0], new String[]{
            "Last Name", "First Name", "Email"
        }));
    }//GEN-LAST:event_clearInvitesButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateEventGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateEventGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateEventGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateEventGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        RARDocument dummy = new RARDocument();
        
        dummy.getRoster().addMember(new Member(1, "Steven", "Claggett"));
        dummy.getRoster().addMember(new Member(2, "Chris", "Reilly"));
        dummy.getRoster().addMember(new Member(3, "Jamal", "Almoussli"));
        dummy.getRoster().addMember(new Member(4, "Vangelis", "Koch"));
        dummy.getRoster().addMember(new Member(5, "Geroge", "Puterscmidt"));
        dummy.getRoster().addMember(new Member(6, "Jeoff", "Butcher"));
        dummy.getRoster().addMember(new Member(7, "Kris", "Baker"));
        dummy.getRoster().addMember(new Member(8, "Samantha", "Butler"));
        dummy.getRoster().addMember(new Member(9, "Lady", "Albertson"));
        dummy.getRoster().addMember(new Member(11, "Evlyn", "Busch"));
        dummy.getRoster().addMember(new Member(22, "Lori", "Logan"));
        dummy.getRoster().addMember(new Member(33, "Peter", "Rusnak"));
        dummy.getRoster().addMember(new Member(44, "Chinom", "Obama"));
        dummy.getRoster().addMember(new Member(55, "Samuel", "Greneir"));
        dummy.getRoster().addMember(new Member(66, "Esther", "Anderson"));
        dummy.getRoster().addMember(new Member(77, "Dick", "Dyke"));
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateEventGUI(dummy).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearInvitesButton;
    private javax.swing.JButton createButton;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JTable invitesTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JTextArea nameTextArea;
    private javax.swing.JTable rosterTable;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables
}
